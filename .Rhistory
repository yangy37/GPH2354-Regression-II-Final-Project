geom_histogram(col = 'orange')
#Show the distribution of data set.
pander(skewness(my_data), caption = 'Skewness of numeric data')
# Check Correlation
cor <- cor(my_data);
pander(cor);
# Continuous Variables
cont.var.Final <- my_data %>% dplyr::select(age, cigage, alcage)
summary(cont.var.Final)
# Categorical Variables
# List of categorical variables
cat.var.Final <- c("male", "heart", "smoke", "depress", "bp", "exercise", "health")
# Loop through each categorical variable and print its percentage frequency table
for (var in cat.var.Final) {
cat("\nPercentage Frequency table for", var, ":\n")
freq.table <- table(my_data[[var]])
perc.table <- round((freq.table / sum(freq.table)) * 100, 2) # calculate percentages and round off to 2 decimal places
pander(freq.table)
pander(perc.table)
}
# Case 1
## T - Test for Continuous Predictors
t.test(my_data$heart,my_data$alcage)
t.test(my_data$heart,my_data$cigage)
t.test(my_data$heart,my_data$age)
# Calculating mean and SD for each continuous predictor within each category of 'heart'
# for 'age'
age.stats.1 <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Age = mean(age, na.rm = TRUE),
SD_Age = sd(age, na.rm = TRUE)
)
print("Age statistics by heart categories:")
print(age.stats.1)
# for 'cigage'
cigage.stats.1 <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Cigage = mean(cigage, na.rm = TRUE),
SD_Cigage = sd(cigage, na.rm = TRUE)
)
print("Cigage statistics by heart categories:")
print(cigage.stats.1)
# for 'alcage'
alcage.stats.1 <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Alcage = mean(alcage, na.rm = TRUE),
SD_Alcage = sd(alcage, na.rm = TRUE)
)
print("Alcage statistics by heart categories:")
print(alcage.stats.1)
## Chi-Squared Tests for Categorical Predictors
### Loop through each categorical predictor and create a contingency table with 'heart'
for (predictor in cat.var.Final) {
cat("\nContingency table for", predictor, "and heart:\n")
conti.table.1 <- table(my_data[[predictor]], my_data$heart)
perc.conti.table.1 <- prop.table(conti.table.1, margin = 2) * 100
chi.squared.test.1 <- chisq.test(conti.table.1)
print(chi.squared.test.1)
print(conti.table.1)
print(perc.conti.table.1)
}
# Checking for outliers in continuous variables
cont.var.Final.long <- pivot_longer(my_data, cols = c(age, cigage, alcage),
names_to = "variable", values_to = "value")
## Create boxplots for age, cigage, and alcage
ggplot(cont.var.Final.long, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Boxplots for Continuous Variables") +
xlab("Variable") +
ylab("Value")
# Checking for data consistency
summary(cont.var.Final)
# Checking for Multicollinearity
## Correlation matrix for 'age', 'cigage', and 'alcage'
cor.mat <- cor(my_data[c("age", "cigage", "alcage")], use = "complete.obs")
print(cor.mat)
## Standardization for Continuous Variables in case there are multicollinearity
my_data$age <- scale(my_data$age)
my_data$cigage <- scale(my_data$cigage)
my_data$alcage <- scale(my_data$alcage)
## Case 1
### Use Linear model as a proxy
linear.model.assump.1 <- lm(heart ~ age + cigage + alcage + as.factor(male) +
as.factor(smoke) + as.factor(depress) +
as.factor(bp) + as.factor(exercise), data = my_data)
pander(vif(linear.model.assump.1))
## Homoscedasticity
plot(linear.model.assump.1, which = 1)
# Normality of Residuals
qqnorm(residuals(linear.model.assump.1))
qqline(residuals(linear.model.assump.1))
# Independence of Errors
dwt.rst.1 <- dwtest(linear.model.assump.1)
print(dwt.rst.1)
## Case 2
### Use Linear model as a proxy
linear.model.assump.2 <- lm(as.numeric(health) ~ age + cigage +
alcage + as.factor(male) + as.factor(smoke) +
as.factor(depress) + as.factor(bp) +
as.factor(exercise), data = my_data)
pander(vif(linear.model.assump.2))
## Homoscedasticity
plot(linear.model.assump.2, which = 1)
# Normality of Residuals
qqnorm(residuals(linear.model.assump.2))
qqline(residuals(linear.model.assump.2))
# Independence of Errors
dwt.rst.2 <- dwtest(linear.model.assump.2)
print(dwt.rst.2)
# Step 1
my_data_1 <- my_data %>% dplyr::select(heart, bp, smoke, age, male, exercise);
#Backward and forward Model selection
backwards <- step(glm(factor(heart) ~ factor(bp) + factor(smoke) + age +
factor(male) + factor(exercise),
family = binomial,
data = my_data_1)); # Backwards selection is the default
summary(backwards);
forward <- step(backwards,
scope = list(lower = formula(backwards),
upper = formula(backwards)),
direction = "forward");
formula(forward);
model_1 <- glm(heart ~ bp + smoke + age + male,
family = binomial, data = my_data_1);
summary(model_1);
# Check Correlation for Continuous variable
vif_1 <- car::vif(model_1);
vif_1;
#Step 2
#Backward and forward Model selection
backwards_2 <- step(glm(factor(heart) ~ factor(bp) + factor(smoke) + age +
factor(male) + factor(exercise) + smoke * male,
family = binomial,
data = my_data_1)); # Backwards selection is the default
summary(backwards_2);
forward_2 <- step(backwards_2,
scope = list(lower = formula(backwards_2),
upper = formula(backwards_2)),
direction = "forward");
formula(forward_2);
model_1_2 <- glm(factor(heart) ~ factor(bp) + factor(smoke) + age +
factor(male) + factor(smoke) * factor(male),
family = binomial, data = my_data_1);
summary(model_1_2);
# Check Correlation for Continuous variable
vif_1_2 <- car::vif(model_1_2);
vif_1_2;
#Likelihood Ratio Test
lrtest(model_1, model_1_2);
#Step 3
exp(cbind(OR = coef(model_1), confint(model_1)));
exp(cbind(OR = coef(model_1_2), confint(model_1_2)));
anova(model_1,model_1_2);
hoslem_1 <- hoslem.test(model_1$y, model_1_2$fitted.values, g=5);
hoslem_1;
pander(c("Model_1 AIC" = AIC(model_1), "Model_1_2 AIC" = AIC(model_1_2),
"Model_1 BIC" = BIC(model_1), "Model_1_2 BIC" = BIC(model_1_2)));
## ANOVA Comparison
anova(model_1, model_1_2)
## 1- chisq probability
### Basic Model
1 - pchisq(model_1$deviance, model_1$df.residual)
### Interaction Model
1 - pchisq(model_1_2$deviance, model_1_2$df.residual)
## Hosmer-Lemeshow Test
### Basic Model
ht_model_1 <- hoslem.test(model_1$y, fitted(model_1), g = 10)
ht_model_1
### Interaction Model
ht_model_1_2 <- hoslem.test(model_1_2$y, fitted(model_1_2), g = 10)
ht_model_1_2
# Plot ROC curves
rocplot1 <- roc(heart~fitted(model_1), data=my_data_1);
plot.roc(rocplot1, legacy.axes=TRUE);
rocplot2 <- roc(heart~fitted(model_1_2), data=my_data_1);
plot.roc(rocplot2, legacy.axes=TRUE);
pander(c("Model_1 AUC" = auc(my_data_1$heart, model_1$fitted.values),
"Model_1_2 AUC" = auc(my_data_1$heart, model_1_2$fitted.values)));
#Step 3
exp(cbind(OR = coef(model_1), confint(model_1)));
exp(cbind(OR = coef(model_1_2), confint(model_1_2)));
anova(model_1,model_1_2);
hoslem_1 <- hoslem.test(model_1$y, model_1_2$fitted.values, g=5);
hoslem_1;
pander(c("Model_1 AIC" = AIC(model_1), "Model_1_2 AIC" = AIC(model_1_2),
"Model_1 BIC" = BIC(model_1), "Model_1_2 BIC" = BIC(model_1_2)));
## ANOVA Comparison
anova(model_1, model_1_2)
## 1- chisq probability
### Basic Model
1 - pchisq(model_1$deviance, model_1$df.residual)
### Interaction Model
1 - pchisq(model_1_2$deviance, model_1_2$df.residual)
## Hosmer-Lemeshow Test
### Basic Model
ht_model_1 <- hoslem.test(model_1$y, fitted(model_1), g = 10)
ht_model_1
### Interaction Model
ht_model_1_2 <- hoslem.test(model_1_2$y, fitted(model_1_2), g = 10)
ht_model_1_2
# Plot ROC curves
rocplot1 <- roc(heart~fitted(model_1), data=my_data_1);
plot.roc(rocplot1, legacy.axes=TRUE);
rocplot2 <- roc(heart~fitted(model_1_2), data=my_data_1);
plot.roc(rocplot2, legacy.axes=TRUE);
pander(c("Model_1 AUC" = auc(my_data_1$heart, model_1$fitted.values),
"Model_1_2 AUC" = auc(my_data_1$heart, model_1_2$fitted.values)));
### AUC Calculation
auc_1 <- auc(rocplot1)
auc_2 <- auc(rocplot2)
pander(c("Basic Model AUC" = auc_1, "Interaction Model AUC" = auc_2))
#Step 3
exp(cbind(OR = coef(model_1), confint(model_1)));
exp(cbind(OR = coef(model_1_2), confint(model_1_2)));
anova(model_1,model_1_2);
hoslem_1 <- hoslem.test(model_1$y, model_1_2$fitted.values, g=5);
hoslem_1;
pander(c("Model_1 AIC" = AIC(model_1), "Model_1_2 AIC" = AIC(model_1_2),
"Model_1 BIC" = BIC(model_1), "Model_1_2 BIC" = BIC(model_1_2)));
## ANOVA Comparison
anova(model_1, model_1_2)
## 1- chisq probability
### Basic Model
1 - pchisq(model_1$deviance, model_1$df.residual)
### Interaction Model
1 - pchisq(model_1_2$deviance, model_1_2$df.residual)
## Hosmer-Lemeshow Test
### Basic Model
ht_model_1 <- hoslem.test(model_1$y, fitted(model_1), g = 10)
ht_model_1
### Interaction Model
ht_model_1_2 <- hoslem.test(model_1_2$y, fitted(model_1_2), g = 10)
ht_model_1_2
# Plot ROC curves and AUC
rocplot1 <- roc(heart~fitted(model_1), data=my_data_1);
plot.roc(rocplot1, legacy.axes=TRUE);
rocplot2 <- roc(heart~fitted(model_1_2), data=my_data_1);
plot.roc(rocplot2, legacy.axes=TRUE);
pander(c("Model_1 AUC" = auc(my_data_1$heart, model_1$fitted.values),
"Model_1_2 AUC" = auc(my_data_1$heart, model_1_2$fitted.values)));
## 1- chisq probability
### Basic Model
1 - pchisq(model_1$deviance, model_1$df.residual)
## 1- chisq probability
### Basic Model
pander(c(1 - pchisq(model_1$deviance, model_1$df.residual), 1 - pchisq(model_1_2$deviance, model_1_2$df.residual)))
ht_model_1
#Step 3
exp(cbind(OR = coef(model_1), confint(model_1)));
exp(cbind(OR = coef(model_1_2), confint(model_1_2)));
anova(model_1,model_1_2);
hoslem_1 <- hoslem.test(model_1$y, model_1_2$fitted.values, g=5);
hoslem_1;
pander(c("Model_1 AIC" = AIC(model_1), "Model_1_2 AIC" = AIC(model_1_2),
"Model_1 BIC" = BIC(model_1), "Model_1_2 BIC" = BIC(model_1_2)));
## ANOVA Comparison
anova(model_1, model_1_2)
## 1- chisq probability
### Basic Model
pander(c(1 - pchisq(model_1$deviance, model_1$df.residual), 1 - pchisq(model_1_2$deviance, model_1_2$df.residual)))
## Hosmer-Lemeshow Test
### Basic Model
ht_model_1 <- hoslem.test(model_1$y, fitted(model_1), g = 10)
ht_model_1
### Interaction Model
ht_model_1_2 <- hoslem.test(model_1_2$y, fitted(model_1_2), g = 10)
ht_model_1_2
# Plot ROC curves and AUC
rocplot1 <- roc(heart~fitted(model_1), data=my_data_1);
plot.roc(rocplot1, legacy.axes=TRUE);
rocplot2 <- roc(heart~fitted(model_1_2), data=my_data_1);
plot.roc(rocplot2, legacy.axes=TRUE);
pander(c("Model_1 AUC" = auc(my_data_1$heart, model_1$fitted.values),
"Model_1_2 AUC" = auc(my_data_1$heart, model_1_2$fitted.values)));
## Case 1
### Use Linear model as a proxy
linear_model_assump <- lm(heart ~ age + cigage + alcage + as.factor(male) +
as.factor(smoke) + as.factor(depress) +
as.factor(bp) + as.factor(exercise), data = my_data)
pander(vif(linear_model_assump))
## Homoscedasticity
plot(linear_model_assump, which = 1)
# Normality of Residuals
qqnorm(residuals(linear.model.assump.1))
qqline(residuals(linear.model.assump.1))
# Normality of Residuals
qqnorm(residuals(linear_model_assump))
qqline(residuals(linear_model_assump))
# Checking for outliers in continuous variables
cont.var.Final.long <- pivot_longer(my_data, cols = c(age, cigage, alcage),
names_to = "variable", values_to = "value")
## Create boxplots for age, cigage, and alcage
ggplot(cont.var.Final.long, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Boxplots for Continuous Variables") +
xlab("Variable") +
ylab("Value")
# Checking for data consistency
summary(cont.var.Final)
# Checking for Multicollinearity
## Correlation matrix for 'age', 'cigage', and 'alcage'
cor.mat <- cor(my_data[c("age", "cigage", "alcage")], use = "complete.obs")
print(cor.mat)
## Standardization for Continuous Variables in case there are multicollinearity
my_data$age <- scale(my_data$age)
my_data$cigage <- scale(my_data$cigage)
my_data$alcage <- scale(my_data$alcage)
## Case 1
### Use Linear model as a proxy
linear_model_assump <- lm(heart ~ age + cigage + alcage + as.factor(male) +
as.factor(smoke) + as.factor(depress) +
as.factor(bp) + as.factor(exercise), data = my_data)
pander(vif(linear_model_assump))
## Homoscedasticity
plot(linear_model_assump, which = 1)
# Normality of Residuals
qqnorm(residuals(linear_model_assump))
qqline(residuals(linear_model_assump))
# Independence of Errors
print(dwtest(linear_model_assump))
## Case 2
### Use Linear model as a proxy
linear.model.assump.2 <- lm(as.numeric(health) ~ age + cigage +
alcage + as.factor(male) + as.factor(smoke) +
as.factor(depress) + as.factor(bp) +
as.factor(exercise), data = my_data)
pander(vif(linear.model.assump.2))
## Homoscedasticity
plot(linear.model.assump.2, which = 1)
# Normality of Residuals
qqnorm(residuals(linear.model.assump.2))
qqline(residuals(linear.model.assump.2))
# Independence of Errors
dwt.rst.2 <- dwtest(linear.model.assump.2)
print(dwt.rst.2)
# Independence of Errors
print(dwtest(linear_model_assump))
# Independence of Errors
dwtest(linear_model_assump)
# Checking for outliers in continuous variables
cont_var_long <- pivot_longer(my_data, cols = c(age, cigage, alcage),
names_to = "variable", values_to = "value")
## Create boxplots for age, cigage, and alcage
ggplot(cont_var_long, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Boxplots for Continuous Variables") +
xlab("Variable") +
ylab("Value")
# Checking for Multicollinearity
## Correlation matrix for 'age', 'cigage', and 'alcage'
cor.mat <- cor(my_data[c("age", "cigage", "alcage")], use = "complete.obs")
print(cor.mat)
# Checking for Multicollinearity
## Correlation matrix for 'age', 'cigage', and 'alcage'
cor <- cor(my_data[c("age", "cigage", "alcage")], use = "complete.obs")
print(cor)
# Case 1
## T - Test for Continuous Predictors
t.test(my_data$heart,my_data$alcage)
t.test(my_data$heart,my_data$cigage)
t.test(my_data$heart,my_data$age)
# Calculating mean and SD for each continuous predictor within
# each category of 'heart' for 'age'
age_stat <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Age = mean(age, na.rm = TRUE),
SD_Age = sd(age, na.rm = TRUE)
)
print(age_stat)
# for 'cigage'
cigage_stat <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Cigage = mean(cigage, na.rm = TRUE),
SD_Cigage = sd(cigage, na.rm = TRUE)
)
print(cigage_stat)
# for 'alcage'
alcage_stat <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Alcage = mean(alcage, na.rm = TRUE),
SD_Alcage = sd(alcage, na.rm = TRUE)
)
print(alcage_stat)
pander(c(age_stat, cigage_stat, alcage_stat))
pander(c(age_stat, cigage_stat, alcage_stat))
## Chi-Squared Tests for Categorical Predictors
### Loop through each categorical predictor and create a contingency table with 'heart'
for (predictor in cat.var.Final) {
cat("\nContingency table for", predictor, "and heart:\n")
conti.table.1 <- table(my_data[[predictor]], my_data$heart)
perc.conti.table.1 <- prop.table(conti.table.1, margin = 2) * 100
chi.squared.test.1 <- chisq.test(conti.table.1)
print(chi.squared.test.1)
print(conti.table.1)
print(perc.conti.table.1)
}
# Checking for outliers in continuous variables
cont_var_long <- pivot_longer(my_data, cols = c(age, cigage, alcage),
names_to = "variable", values_to = "value")
## Create boxplots for age, cigage, and alcage
ggplot(cont_var_long, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Boxplots for Continuous Variables") +
xlab("Variable") +
ylab("Value")
# Checking for data consistency
summary(cont_var)
library(pander)
library(ggplot2)
library(moments)
library(tidyverse)
library(psych)
library(rio)
library(MASS)
library(ResourceSelection)
library(car)
library(VGAM)
library(pROC)
library(lmtest)
my_data <- read.csv("MIDUS_III_Final_Exam_Fall2023_data.csv")
#Show the first six rows of data set.
pander(head(my_data))
my_data %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(col = 'orange')
#Show the distribution of data set.
pander(skewness(my_data), caption = 'Skewness of numeric data')
# Check Correlation
cor <- cor(my_data);
pander(cor);
# Continuous Variables
cont_var <- my_data %>% dplyr::select(age, cigage, alcage)
summary(cont_var)
# Categorical Variables
# List of categorical variables
cat.var.Final <- c("male", "heart", "smoke", "depress", "bp", "exercise", "health")
# Loop through each categorical variable and print its percentage frequency table
for (var in cat.var.Final) {
cat("\nPercentage Frequency table for", var, ":\n")
freq.table <- table(my_data[[var]])
perc.table <- round((freq.table / sum(freq.table)) * 100, 2) # calculate percentages and round off to 2 decimal places
pander(freq.table)
pander(perc.table)
}
# Case 1
## T - Test for Continuous Predictors
t.test(my_data$heart,my_data$alcage)
t.test(my_data$heart,my_data$cigage)
t.test(my_data$heart,my_data$age)
# Calculating mean and SD for each continuous predictor within
# each category of 'heart' for 'age'
age_stat <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Age = mean(age, na.rm = TRUE),
SD_Age = sd(age, na.rm = TRUE)
)
print(age_stat)
# for 'cigage'
cigage_stat <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Cigage = mean(cigage, na.rm = TRUE),
SD_Cigage = sd(cigage, na.rm = TRUE)
)
print(cigage_stat)
# for 'alcage'
alcage_stat <- my_data %>%
group_by(heart) %>%
summarise(
Mean_Alcage = mean(alcage, na.rm = TRUE),
SD_Alcage = sd(alcage, na.rm = TRUE)
)
print(alcage_stat)
## Chi-Squared Tests for Categorical Predictors
### Loop through each categorical predictor and create a contingency table with 'heart'
for (predictor in cat.var.Final) {
cat("\nContingency table for", predictor, "and heart:\n")
conti.table.1 <- table(my_data[[predictor]], my_data$heart)
perc.conti.table.1 <- prop.table(conti.table.1, margin = 2) * 100
chi.squared.test.1 <- chisq.test(conti.table.1)
print(chi.squared.test.1)
print(conti.table.1)
print(perc.conti.table.1)
}
# Checking for data consistency
summary(cont_var)
# Checking for Multicollinearity
## Correlation matrix for 'age', 'cigage', and 'alcage'
cor <- cor(my_data[c("age", "cigage", "alcage")], use = "complete.obs")
print(cor)
# Checking for Multicollinearity
## Correlation matrix for 'age', 'cigage', and 'alcage'
cor <- cor(my_data[c("age", "cigage", "alcage")])
print(cor)
## Standardization for Continuous Variables in case there are multicollinearity
my_data$age <- scale(my_data$age)
my_data$cigage <- scale(my_data$cigage)
my_data$alcage <- scale(my_data$alcage)
